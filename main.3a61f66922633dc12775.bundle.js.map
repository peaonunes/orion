{"version":3,"file":"main.3a61f66922633dc12775.bundle.js","sources":["webpack:///./src/utils/factories.js"],"sourcesContent":["import _ from 'lodash'\nimport cx from 'classnames'\nimport React, { cloneElement, isValidElement } from 'react'\n\n// COPIED FROM semantic-ui-react, as they don't export it:\n// https://github.com/Semantic-Org/Semantic-UI-React/blob/master/src/lib/factories.js\n\n// ============================================================\n// Factories\n// ============================================================\n\n/**\n * A more robust React.createElement. It can create elements from primitive values.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @param {string|object|function} val The value to create a ReactElement from\n * @param {Object} [options={}]\n * @param {object} [options.defaultProps={}] Default props object\n * @param {object|function} [options.overrideProps={}] Override props object or function (called with regular props)\n * @param {boolean} [options.autoGenerateKey=true] Whether or not automatic key generation is allowed\n * @returns {object|null}\n */\nexport function createShorthand(Component, mapValueToProps, val, options = {}) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthand() Component must be a string or function.')\n  }\n  // short circuit noop values\n  if (_.isNil(val) || _.isBoolean(val)) return null\n\n  const valIsString = _.isString(val)\n  const valIsNumber = _.isNumber(val)\n  const valIsFunction = _.isFunction(val)\n  const valIsReactElement = isValidElement(val)\n  const valIsPropsObject = _.isPlainObject(val)\n  const valIsPrimitiveValue = valIsString || valIsNumber || _.isArray(val)\n\n  // unhandled type return null\n  /* eslint-disable no-console */\n  if (\n    !valIsFunction &&\n    !valIsReactElement &&\n    !valIsPropsObject &&\n    !valIsPrimitiveValue\n  ) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        [\n          'Shorthand value must be a string|number|array|object|ReactElement|function.',\n          ' Use null|undefined|boolean for none',\n          ` Received ${typeof val}.`\n        ].join('')\n      )\n    }\n    return null\n  }\n  /* eslint-enable no-console */\n\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n  const { defaultProps = {} } = options\n\n  // User's props\n  const usersProps =\n    (valIsReactElement && val.props) ||\n    (valIsPropsObject && val) ||\n    (valIsPrimitiveValue && mapValueToProps(val))\n\n  // Override props\n  let { overrideProps = {} } = options\n  overrideProps = _.isFunction(overrideProps)\n    ? overrideProps({ ...defaultProps, ...usersProps })\n    : overrideProps\n\n  // Merge props\n  /* eslint-disable react/prop-types */\n  const props = { ...defaultProps, ...usersProps, ...overrideProps }\n\n  // Merge className\n  if (\n    defaultProps.className ||\n    overrideProps.className ||\n    usersProps.className\n  ) {\n    const mergedClassesNames = cx(\n      defaultProps.className,\n      overrideProps.className,\n      usersProps.className\n    )\n    props.className = _.uniq(mergedClassesNames.split(' ')).join(' ')\n  }\n\n  // Merge style\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    props.style = {\n      ...defaultProps.style,\n      ...usersProps.style,\n      ...overrideProps.style\n    }\n  }\n\n  // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n\n  // Use key, childKey, or generate key\n  if (_.isNil(props.key)) {\n    const { childKey } = props\n    const { autoGenerateKey = true } = options\n\n    if (!_.isNil(childKey)) {\n      // apply and consume the childKey\n      props.key = typeof childKey === 'function' ? childKey(props) : childKey\n      delete props.childKey\n    } else if (autoGenerateKey && (valIsString || valIsNumber)) {\n      // use string/number shorthand values as the key\n      props.key = val\n    }\n  }\n\n  // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n\n  // Clone ReactElements\n  if (valIsReactElement) return cloneElement(val, props)\n\n  // Create ReactElements from built up props\n  if (valIsPrimitiveValue || valIsPropsObject) return <Component {...props} />\n\n  // Call functions with args similar to createElement()\n  if (valIsFunction) return val(Component, props, props.children)\n  /* eslint-enable react/prop-types */\n}\n\n// ============================================================\n// Factory Creators\n// ============================================================\n\n/**\n * Creates a `createShorthand` function that is waiting for a value and options.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @returns {function} A shorthand factory function waiting for `val` and `defaultProps`.\n */\nexport function createShorthandFactory(Component, mapValueToProps) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error(\n      'createShorthandFactory() Component must be a string or function.'\n    )\n  }\n\n  return (val, options) =>\n    createShorthand(Component, mapValueToProps, val, options)\n}\n"],"mappings":"AAuBA","sourceRoot":""}